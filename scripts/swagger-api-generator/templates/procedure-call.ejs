<%
const { utils, route, config } = it;
const { requestBodyInfo, responseBodyInfo } = route;
const { _, getInlineParseContent, getParseContent, parseSchema, getComponentByRef, require } = utils;
const { parameters, path, method, payload, query, formData, security, requestParams } = route.request;
const { type, errorType, contentTypes } = route.response;
const routeDocs = includeFile("@base/route-docs", { config, route, utils });
const queryName = (query && query.name) || "query";
const pathParams = _.values(parameters);
const pathParamsNames = _.map(pathParams, "name");
const variableName = route.routeName.usage.replace('Controller', '')
const typeVariableName = `${variableName.slice(0, 1).toUpperCase() + variableName.slice(1)}`;
const typeParamsVariableName = `${typeVariableName}Params`;
const typeQueryVariableName = `${typeVariableName}Query`;

const argToParameterName = ({ name }) => name;

const extendsQueryTypes = ({ name, optional, data, type }) => `type Query = ${type}`

const argToRequestParam = ({ name, type, optional }) => `${name}${optional ? '?' : ''}: ${type}`

const rawWrapperArgs = _.compact([
        ...pathParams,
        query,
        payload,
    ])

const wrapperArgs = _.sortBy(rawWrapperArgs, [o => o.optional]);

const requestParamsArgs = wrapperArgs.map(argToRequestParam)

function getRequestParamsType() {
    if (requestParamsArgs.length) {
        return `{ ${requestParamsArgs.join(',')} }`
    }
    return 'void';
}

const requestParamsType = `export type ${typeParamsVariableName} = ${getRequestParamsType()};\n`

const parameterNames = wrapperArgs.map(argToParameterName).join(',')

const bodyTmpl = _.get(payload, "name") || null;
const queryTmpl = (query != null && queryName) || null;
const securityTmpl = security ? 'true' : null;
%>

<%~ requestParamsType %>

export const <%~ variableName %>Fx = createEffect<<%~ typeParamsVariableName %>, <%~ type %>, <%~ errorType  %>>({
    async handler(<%~ parameterNames.length ? `{ ${parameterNames} }` : '' %>) {
        const response = await requestFx({
            path: `<%~ path %>`,
            method: '<%~ method %>',
            <%~ queryTmpl ? `query,` : '' %>
            <%~ bodyTmpl ? `body: ${bodyTmpl},` : '' %>
            <%~ securityTmpl ? `secure: ${securityTmpl},` : '' %>
        })

        if (response.status >= 400) {
            throw response.body as <%~ errorType %>
        }

        return response.body as <%~ type %>
    }
});
